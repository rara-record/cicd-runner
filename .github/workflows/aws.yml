name: Deploy to AWS

on:
  push:
    branches: [ "main" ]

# env:
#   AWS_REGION: MY_AWS_REGION                   # set this to your preferred AWS region, e.g. us-west-1
#   ECR_REPOSITORY: MY_ECR_REPOSITORY           # set this to your Amazon ECR repository name
#   ECS_SERVICE: MY_ECS_SERVICE                 # set this to your Amazon ECS service name
#   ECS_CLUSTER: MY_ECS_CLUSTER                 # set this to your Amazon ECS cluster name
#   ECS_TASK_DEFINITION: MY_ECS_TASK_DEFINITION # set this to the path to your Amazon ECS task definition
#                                                # file, e.g. .aws/task-definition.json
#   CONTAINER_NAME: MY_CONTAINER_NAME           # set this to the name of the container in the
#                                                # containerDefinitions section of your task definition

jobs:
  build-docker:
    runs-on: ubuntu-latest
    # environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # # - name: Configure AWS credentials
    # #   uses: aws-actions/configure-aws-credentials@v4
    # #   with:
    # #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    # #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    # #     aws-region: ${{ env.AWS_REGION }}

    # - name: Login to Amazon ECR
    #   id: login-ecr
    #   uses: aws-actions/amazon-ecr-login@v2

    # - name: Docker Build & Set Deploy script
    #   # id: build-image
    #   env:
    #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
    #     ECR_REPOSITORY: nextjs-docker
    #     IMAGE_TAG: ${{ github.sha }}
    #   run: |
    #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
    #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    #     mkdir scripts
    #     touch scripts/deploy.sh
    #     echo "aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin $ECR_REPOSITORY" >> scripts/deploy.sh
    #     echo "docker pull $ECR_REPOSITORY/$ECR_REPOSITORY:$IMAGE_TAG" >> scripts/deploy.sh
    #     echo "docker kill nextjs" >> scripts/deploy.sh
    #     echo "docker run"  >> scripts/deploy.sh

    # - name: Fill in the new image ID in the Amazon ECS task definition
    #   id: task-def
    #   uses: aws-actions/amazon-ecs-render-task-definition@v1
    #   with:
    #     task-definition: ${{ env.ECS_TASK_DEFINITION }}
    #     container-name: ${{ env.CONTAINER_NAME }}
    #     image: ${{ steps.build-image.outputs.image }}

    # - name: Deploy Amazon ECS task definition
    #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #   with:
    #     task-definition: ${{ steps.task-def.outputs.task-definition }}
    #     service: ${{ env.ECS_SERVICE }}
    #     cluster: ${{ env.ECS_CLUSTER }}
    #     wait-for-service-stability: true
